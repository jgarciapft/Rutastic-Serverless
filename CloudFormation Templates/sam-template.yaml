AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Rutastic Serverless WebApp
Parameters:
  VPCId:
    Type: AWS::EC2::VPC::Id
    Description: El ID de la VPC en la que alojar el clúster Aurora (RutasticDB)
  VPCSubnetsIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Listado de las subredes en la VPC en la que se aloja el clúster Aurora (RutasticDB)
  DBDevEndpointSourceCIDR:
    Type: String
    Description: CIDR de la red desde la que se permitirá el acceso al endpoint del desarrollador
  RutasticAPIStageName:
    Type: String
    Description: Nombre de la etapa en la que se desplegará RutasticAPI
  LambdaExecutionRoleArn:
    Type: String
    Description: ARN del rol asociado a las funciones Lambda
  GitHubPersonalAccessToken:
    Type: String
    Description: Token de acceso personal de GitHub con acceso al repositorio de Rutastic
Globals:
  Function:
    Runtime: java11
    Architectures:
      - x86_64
    MemorySize: 256
    EphemeralStorage:
      Size: 512
    Timeout: 15
    Environment:
      Variables:
        DB_USER: !Sub '{{resolve:secretsmanager:${AuroraDBServerlessCluster.MasterUserSecret.SecretArn}:SecretString:username}}'
        DB_USER_PWD: !Sub '{{resolve:secretsmanager:${AuroraDBServerlessCluster.MasterUserSecret.SecretArn}:SecretString:password}}'
        READ_ENDPOINT: !GetAtt AuroraDBServerlessCluster.ReadEndpoint.Address
        WRITE_ENDPOINT: !GetAtt AuroraDBServerlessCluster.Endpoint.Address
        PORT: !GetAtt AuroraDBServerlessCluster.Endpoint.Port
        DB_SCHEMA: rutastic
        CORS_ALLOWED_ORIGINS: !Sub 'https://${AmplifyProductionBranch.BranchName}.${AmplifyHosting.DefaultDomain}'
    VpcConfig:
      SubnetIds: !Ref VPCSubnetsIds
      SecurityGroupIds:
        - !Ref DBSecurityGroupByEC2SG
    CodeUri: rutastic-api
Resources:
  AuroraDBServerlessCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      AvailabilityZones:
        - !Sub ${AWS::Region}a
        - !Sub ${AWS::Region}b
        - !Sub ${AWS::Region}c
      DatabaseName: rutastic
      DBClusterIdentifier: rutasticdb-cluster
      DBSubnetGroupName: !Ref DBSubnetGroup
      Engine: aurora-mysql
      EngineVersion: 8.0.mysql_aurora.3.02.0
      MasterUsername: master
      ManageMasterUserPassword: true
      MasterUserSecret:
        KmsKeyId: !Ref DBSecretEncryptionKey
      NetworkType: IPV4
      Port: 3306
      ServerlessV2ScalingConfiguration:
        MinCapacity: 0.5
        MaxCapacity: 3
      StorageEncrypted: true
      VpcSecurityGroupIds:
        - !Ref DBSecurityGroupByEC2SG

  DBSecretEncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      Description: RutasticDB credentials secret encryption key
      KeyPolicy:
        Version: 2012-10-17
        Id: !Ref AWS::StackName
        Statement:
          - Sid: Allow administration of the key
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:root'
            Action:
              - 'kms:*'
            Resource: '*'

  DBServerlessInstance1:
    Type: AWS::RDS::DBInstance
    Properties:
      AvailabilityZone: !Sub ${AWS::Region}a
      DBClusterIdentifier: !Ref AuroraDBServerlessCluster
      DBInstanceClass: db.serverless
      DBInstanceIdentifier: rutasticdb-instance-1
      Engine: aurora-mysql
      PubliclyAccessible: true
      PromotionTier: 0

  DBServerlessInstance2:
    Type: AWS::RDS::DBInstance
    Properties:
      AvailabilityZone: !Sub ${AWS::Region}b
      DBClusterIdentifier: !Ref AuroraDBServerlessCluster
      DBInstanceClass: db.serverless
      DBInstanceIdentifier: rutasticdb-instance-2
      Engine: aurora-mysql
      PubliclyAccessible: true
      PromotionTier: 1

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: rutasticdb-subnet-group
      DBSubnetGroupDescription: Created from CloudFormation template
      SubnetIds: !Ref VPCSubnetsIds

  DBSecurityGroupByEC2SG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for RutasticDB resource
      GroupName: RutasticDB-AuroraCluster-SG
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        - SourceSecurityGroupName: RutasticDB-AuroraCluster-SG
          IpProtocol: -1
        - CidrIp: !Ref DBDevEndpointSourceCIDR
          IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: RutasticUserPool
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
      UsernameConfiguration:
        CaseSensitive: false
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      AutoVerifiedAttributes:
        - email
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_CODE
        EmailSubject: '[Rutastic] Tu código de verificación'
        EmailMessage: 'Tu código de verificación para Rutastic es {####}'
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      MfaConfiguration: 'OFF'

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: Rutastic WebappSPA Client
      UserPoolId: !Ref CognitoUserPool
      GenerateSecret: false
      ReadAttributes:
        - email
        - email_verified
      WriteAttributes:
        - email
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      AccessTokenValidity: 60
      IdTokenValidity: 60
      RefreshTokenValidity: 30
      TokenValidityUnits:
        AccessToken: minutes
        IdToken: minutes
        RefreshToken: days
      PreventUserExistenceErrors: ENABLED

  ApiGatewayRestApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: RutasticAPI
      StageName: !Ref RutasticAPIStageName
      EndpointConfiguration:
        Type: REGIONAL
      Auth:
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt CognitoUserPool.Arn
            Identity:
              Header: Auth
        DefaultAuthorizer: CognitoAuthorizer
        AddDefaultAuthorizerToCorsPreflight: false
      Cors:
        AllowOrigin: "'*'"
        AllowHeaders: "'Content-Type,Authorization,Auth,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
        AllowMethods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"

  LambdaRouteCategoriesGET:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: rutastic-routecategories-get
      Role: !Ref LambdaExecutionRoleArn
      Handler: aws.lambda.handlers.routeCategories.RouteCategoriesGET
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayRestApi
            Method: GET
            Path: /categoriasruta
            Auth:
              Authorizer: NONE

  LambdaUsersGET:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: rutastic-users-get
      Role: !Ref LambdaExecutionRoleArn
      Handler: aws.lambda.handlers.users.UsersGET
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayRestApi
            Method: GET
            Path: /usuarios
            Auth:
              Authorizer: NONE

  LambdaUsersPOST:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: rutastic-users-post
      Role: !Ref LambdaExecutionRoleArn
      Handler: aws.lambda.handlers.users.UsersPOST
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayRestApi
            Method: POST
            Path: /usuarios
            Auth:
              Authorizer: NONE

  LambdaUserProxyDELETE:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: rutastic-user-proxy-delete
      Role: !Ref LambdaExecutionRoleArn
      Handler: aws.lambda.handlers.users.UserProxyDELETE
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayRestApi
            Method: DELETE
            Path: /usuarios/{proxy+}

  LambdaKudoEntriesUserProxyGET:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: rutastic-kudoentries-user-proxy-get
      Role: !Ref LambdaExecutionRoleArn
      Handler: aws.lambda.handlers.kudoEntries.KudoEntriesUserProxyGET
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayRestApi
            Method: GET
            Path: /kudos/{proxy+}

  LambdaRouteProxyGET:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: rutastic-route-proxy-get
      Role: !Ref LambdaExecutionRoleArn
      Handler: aws.lambda.handlers.routes.RouteProxyGET
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayRestApi
            Method: GET
            Path: /rutas/{proxy+}
            Auth:
              Authorizer: NONE

  LambdaRouteFilterGET:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: rutastic-route-filter-get
      Role: !Ref LambdaExecutionRoleArn
      Handler: aws.lambda.handlers.routes.RouteFilterGET
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayRestApi
            Method: GET
            Path: /rutas/filtro
            Auth:
              Authorizer: NONE

  LambdaRouteStatisticsGET:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: rutastic-route-statistics-get
      Role: !Ref LambdaExecutionRoleArn
      Handler: aws.lambda.handlers.routes.RouteStatisticsGET
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayRestApi
            Method: GET
            Path: /rutas/estadisticas
            Auth:
              Authorizer: NONE

  LambdaRoutesPOST:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: rutastic-routes-post
      Role: !Ref LambdaExecutionRoleArn
      Handler: aws.lambda.handlers.routes.RoutesPOST
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayRestApi
            Method: POST
            Path: /rutas

  LambdaRouteProxyPUT:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: rutastic-route-proxy-put
      Role: !Ref LambdaExecutionRoleArn
      Handler: aws.lambda.handlers.routes.RouteProxyPUT
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayRestApi
            Method: PUT
            Path: /rutas/{proxy+}

  LambdaRouteProxyDELETE:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: rutastic-route-proxy-delete
      Role: !Ref LambdaExecutionRoleArn
      Handler: aws.lambda.handlers.routes.RouteProxyDELETE
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayRestApi
            Method: DELETE
            Path: /rutas/{proxy+}

  AmplifyHosting:
    Type: AWS::Amplify::App
    Properties:
      Name: RutasticSPA
      Platform: WEB
      AccessToken: !Ref GitHubPersonalAccessToken
      Repository: https://github.com/jgarciapft/Rutastic-Serverless
      CustomRules:
        - Source: '/<*>'
          Target: '/index.html'
          Status: '404-200'

  AmplifyProductionBranch:
    Type: AWS::Amplify::Branch
    Properties:
      AppId: !GetAtt AmplifyHosting.AppId
      BranchName: main
      EnableAutoBuild: true
      Framework: WEBPACK
      Stage: PRODUCTION
Outputs:
  AuroraClusterSecretArn:
    Value: !GetAtt AuroraDBServerlessCluster.MasterUserSecret.SecretArn
  AuroraClusterEndpoint:
    Value: !GetAtt AuroraDBServerlessCluster.Endpoint.Address
  AuroraClusterReadEndpoint:
    Value: !GetAtt AuroraDBServerlessCluster.ReadEndpoint.Address
  CognitoUserPoolId:
    Value: !Ref CognitoUserPool
  CognitoUserPoolClientId:
    Value: !Ref CognitoUserPoolClient
  RutasticAPIEndpoint:
    Value: !Sub "https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${RutasticAPIStageName}"
  ProductionURL:
    Value: !Sub 'https://${AmplifyProductionBranch.BranchName}.${AmplifyHosting.DefaultDomain}'