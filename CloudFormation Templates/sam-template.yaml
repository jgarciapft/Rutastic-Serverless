AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Rutastic Serverless WebApp
Parameters:
  TemplateExecutionRoleArn:
    Type: String
    Description: ARN del rol asociado al RDSProxy para RutasticDB
  RutasticDBCredentialsSecretArn:
    Type: String
    Description: El ARN del secreto de SecretsManager con las credenciales del usuario maestro para RutasticDB
  RutasticDBVPCId:
    Type: AWS::EC2::VPC::Id
    Description: El ID lógico de la VPC en la que colocar la base de datos RutasticDB
  RutasticDefaultVPCSubnetsIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Lista de IDs de las subnets en las que alojar el RDSProxy para RutasticDB
  RutasticApiStageName:
    Type: String
    Description: Nombre de la etapa en la que se desplegará RutasticAPI
Globals:
  Function:
    Runtime: java11
    VpcConfig:
      SubnetIds: !Ref RutasticDefaultVPCSubnetsIds
      SecurityGroupIds:
        - !Ref SecurityGroupByEC2SG
    MemorySize: 512
    Timeout: 15
    Environment:
      Variables:
        DB_SCHEMA: rutastic
        DB_USER: !Sub '{{resolve:secretsmanager:${RutasticDBCredentialsSecretArn}:SecretString:username}}'
        DB_USER_PWD: !Sub '{{resolve:secretsmanager:${RutasticDBCredentialsSecretArn}:SecretString:password}}'
        PROXY_ENDPOINT: !GetAtt RDSDBProxy.Endpoint
        PORT: !GetAtt RDSDBInstance.Endpoint.Port
Resources:
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: RutasticUserPool
      Schema:
        - Name: email
          AttributeDataType: String
          DeveloperOnlyAttribute: false
          Mutable: true
          Required: true
          StringAttributeConstraints:
            MinLength: 0
            MaxLength: 2048
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          TemporaryPasswordValidityDays: 7
      UsernameConfiguration:
        CaseSensitive: false
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: admin_only
            Priority: 1
      AutoVerifiedAttributes:
        - email
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_CODE
        EmailSubject: '[Rutastic] Tu código de verificación'
        EmailMessage: 'Tu código de verificación para Rutastic es {####}'
      MfaConfiguration: 'OFF'

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: Rutastic WebappSPA client
      UserPoolId: !Ref CognitoUserPool
      ReadAttributes:
        - email
        - email_verified
      WriteAttributes:
        - email
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      AccessTokenValidity: 60
      IdTokenValidity: 60
      RefreshTokenValidity: 30
      TokenValidityUnits:
        AccessToken: minutes
        IdToken: minutes
        RefreshToken: days
      PreventUserExistenceErrors: ENABLED

  RDSDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: RutasticDB
      Engine: mysql
      EngineVersion: 5.7.39
      MultiAZ: false
      DBName: rutastic
      MasterUsername: !Sub '{{resolve:secretsmanager:${RutasticDBCredentialsSecretArn}:SecretString:username}}'
      MasterUserPassword: !Sub '{{resolve:secretsmanager:${RutasticDBCredentialsSecretArn}:SecretString:password}}'
      DBInstanceClass: db.t3.micro
      StorageType: gp2
      AllocatedStorage: 20
      DBSubnetGroupName: !Ref RDSDBSubnetGroup
      PubliclyAccessible: true
      VPCSecurityGroups:
        - !Ref SecurityGroupByEC2SG
      Port: 3306
      MonitoringInterval: 0
      DBParameterGroupName: default.mysql5.7
      OptionGroupName: default:mysql-5-7
      BackupRetentionPeriod: 0
      StorageEncrypted: false
      AutoMinorVersionUpgrade: true
      DeletionProtection: false

  RDSDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: default-dbsubnetgroup
      DBSubnetGroupDescription: Created from CloudFormation template
      SubnetIds: !Ref RutasticDefaultVPCSubnetsIds

  SecurityGroupByEC2SG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for RutasticDB resource
      GroupName: RutasticDB-sg
      VpcId: !Ref RutasticDBVPCId
      SecurityGroupIngress:
        # !!! SHOULDN'T DO !!!
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1

  RDSDBProxy:
    Type: AWS::RDS::DBProxy
    Properties:
      EngineFamily: MYSQL
      DBProxyName: !Sub '${RDSDBInstance}-rdsproxy'
      RequireTLS: true
      IdleClientTimeout: 5400
      RoleArn: !Ref TemplateExecutionRoleArn
      Auth:
        - AuthScheme: SECRETS
          SecretArn: !Ref RutasticDBCredentialsSecretArn
          IAMAuth: DISABLED
      VpcSubnetIds: !Ref RutasticDefaultVPCSubnetsIds
      VpcSecurityGroupIds:
        - !Ref SecurityGroupByEC2SG
      DebugLogging: false

  RDSDBProxyTargetGroup:
    Type: AWS::RDS::DBProxyTargetGroup
    Properties:
      DBProxyName: !Ref RDSDBProxy
      TargetGroupName: default
      DBInstanceIdentifiers:
        - !Ref RDSDBInstance

  ApiGatewayRestApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: RutasticAPI
      StageName: !Ref RutasticApiStageName
      EndpointConfiguration:
        Type: REGIONAL
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        AddDefaultAuthorizerToCorsPreflight: false
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt CognitoUserPool.Arn
            Identity:
              Header: Auth
      Cors:
        AllowHeaders: "'Content-Type,Authorization,Auth,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
        AllowMethods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
        AllowOrigin: "'*'"

  UsersLambdaResourceUsuariosGET:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: rutastic-UsersHandler-usuariosGET
      Role: !Ref TemplateExecutionRoleArn
      Handler: resources.users.UsersHandler
      CodeUri: rutastic-api
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayRestApi
            Method: GET
            Path: /usuarios
            Auth:
              Authorizer: NONE

  UsersLambdaResourceUsuariosPOST:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: rutastic-UsersHandler-usuariosPOST
      Role: !Ref TemplateExecutionRoleArn
      Handler: resources.users.UsersHandler
      CodeUri: rutastic-api
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayRestApi
            Method: POST
            Path: /usuarios

  UsersLambdaResourceUsuariosProxyGET:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: rutastic-UsersHandler-usuariosProxyGET
      Role: !Ref TemplateExecutionRoleArn
      Handler: resources.users.UsersHandler
      CodeUri: rutastic-api
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayRestApi
            Method: GET
            Path: /usuarios/{proxy+}

  UsersLambdaResourceUsuariosProxyDELETE:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: rutastic-UsersHandler-usuariosProxyDELETE
      Role: !Ref TemplateExecutionRoleArn
      Handler: resources.users.UsersHandler
      CodeUri: rutastic-api
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayRestApi
            Method: DELETE
            Path: /usuarios/{proxy+}

  RoutesLambdaResourceRutasPOST:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: rutastic-RoutesHandler-rutasPOST
      Role: !Ref TemplateExecutionRoleArn
      Handler: resources.routes.RoutesHandler
      CodeUri: rutastic-api
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayRestApi
            Method: POST
            Path: /rutas

  RoutesLambdaResourceRutasProxyGET:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: rutastic-RoutesHandler-rutasProxyGET
      Role: !Ref TemplateExecutionRoleArn
      Handler: resources.routes.RoutesHandler
      CodeUri: rutastic-api
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayRestApi
            Method: GET
            Path: /rutas/{proxy+}
            Auth:
              Authorizer: NONE

  RoutesLambdaResourceRutasProxyPUT:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: rutastic-RoutesHandler-rutasProxyPUT
      Role: !Ref TemplateExecutionRoleArn
      Handler: resources.routes.RoutesHandler
      CodeUri: rutastic-api
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayRestApi
            Method: PUT
            Path: /rutas/{proxy+}

  RoutesLambdaResourceRutasProxyDELETE:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: rutastic-RoutesHandler-rutasProxyDELETE
      Role: !Ref TemplateExecutionRoleArn
      Handler: resources.routes.RoutesHandler
      CodeUri: rutastic-api
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayRestApi
            Method: DELETE
            Path: /rutas/{proxy+}

  RouteCategoriesLambdaResourceCategoriasrutaGET:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: rutastic-RouteCategoriesHandler-categoriasrutaGET
      Role: !Ref TemplateExecutionRoleArn
      Handler: resources.routeCategories.RouteCategoriesHandler
      CodeUri: rutastic-api
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayRestApi
            Method: GET
            Path: /categoriasruta
            Auth:
              Authorizer: NONE

  KudoEntriesLambdaResourceKudosProxyGET:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: rutastic-KudoEntriesHandler-kudosProxyGET
      Role: !Ref TemplateExecutionRoleArn
      Handler: resources.kudoEntries.KudoEntriesHandler
      CodeUri: rutastic-api
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayRestApi
            Method: GET
            Path: /kudos/{proxy+}
            Auth:
              Authorizer: NONE

Outputs:
  RutasticDBInstancePublicEndpoint:
    Value: !Sub '${RDSDBInstance.Endpoint.Address}:${RDSDBInstance.Endpoint.Port}'
  CognitoUserPoolId:
    Value: !Ref CognitoUserPool
  CognitoUserPoolClientId:
    Value: !Ref CognitoUserPoolClient
  RutasticAPIEndpoint:
    Value: !Sub "https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${RutasticApiStageName}"