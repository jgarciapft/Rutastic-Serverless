AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Parameters:
  RutasticAPIStageName:
    Type: String
    Description: Nombre de la etapa en la que se desplegará RutasticAPI
  LambdaExecutionRoleArn:
    Type: String
    Description: ARN del rol asociado a las funciones Lambda
Globals:
  Function:
    Runtime: java11
    Architectures:
      - x86_64
    MemorySize: 256
    EphemeralStorage:
      Size: 512
    Timeout: 15
    Environment:
      Variables:
        DB_SCHEMA: rutastic
        DB_USER: root
        DB_USER_PWD: adminadmin
        READ_ENDPOINT: pablogpz.asuscomm.com
        WRITE_ENDPOINT: pablogpz.asuscomm.com
        PORT: 33060
    CodeUri: rutastic-api

Resources:
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: RutasticUserPool
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
      UsernameConfiguration:
        CaseSensitive: false
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      AutoVerifiedAttributes:
        - email
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_CODE
        EmailSubject: '[Rutastic] Tu código de verificación'
        EmailMessage: 'Tu código de verificación para Rutastic es {####}'
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      MfaConfiguration: 'OFF'

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: Rutastic WebappSPA Client
      UserPoolId: !Ref CognitoUserPool
      GenerateSecret: false
      ReadAttributes:
        - email
        - email_verified
      WriteAttributes:
        - email
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_PASSWORD_AUTH
      AccessTokenValidity: 60
      IdTokenValidity: 60
      RefreshTokenValidity: 30
      TokenValidityUnits:
        AccessToken: minutes
        IdToken: minutes
        RefreshToken: days
      PreventUserExistenceErrors: ENABLED

  TESTCognitoUserPoolUser:
    Type: AWS::Cognito::UserPoolUser
    Properties:
      UserPoolId: !Ref CognitoUserPool
      Username: testuser-jgarciapft
      UserAttributes:
        - Name: email
          Value: testuser-jgarciapft@alumnos.unex.es

  ApiGatewayRestApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: RutasticAPI
      StageName: !Ref RutasticAPIStageName
      EndpointConfiguration:
        Type: REGIONAL
      Auth:
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt CognitoUserPool.Arn
            Identity:
              Header: Auth
        DefaultAuthorizer: CognitoAuthorizer
        AddDefaultAuthorizerToCorsPreflight: false
#      Cors:
#        AllowHeaders: "'Content-Type,Authorization,Auth,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
#        AllowMethods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
#        AllowOrigin: "'*'"

  LambdaRouteCategoriesGET:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: rutastic-routecategories-get
      Role: !Ref LambdaExecutionRoleArn
      Handler: aws.lambda.handlers.routeCategories.RouteCategoriesGET
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayRestApi
            Method: GET
            Path: /categoriasruta
            Auth:
              Authorizer: NONE

  LambdaUsersGET:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: rutastic-users-get
      Role: !Ref LambdaExecutionRoleArn
      Handler: aws.lambda.handlers.users.UsersGET
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayRestApi
            Method: GET
            Path: /usuarios
            Auth:
              Authorizer: NONE

  LambdaUsersPOST:
      Type: AWS::Serverless::Function
      Properties:
        FunctionName: rutastic-users-post
        Role: !Ref LambdaExecutionRoleArn
        Handler: aws.lambda.handlers.users.UsersPOST
        Events:
          Api:
            Type: Api
            Properties:
              RestApiId: !Ref ApiGatewayRestApi
              Method: POST
              Path: /usuarios
              Auth:
                Authorizer: NONE

  LambdaUserProxyDELETE:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: rutastic-user-proxy-delete
      Role: !Ref LambdaExecutionRoleArn
      Handler: aws.lambda.handlers.users.UserProxyDELETE
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayRestApi
            Method: DELETE
            Path: /usuarios/{proxy+}

  LambdaKudoEntriesUserProxyGET:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: rutastic-kudoentries-user-proxy-get
      Role: !Ref LambdaExecutionRoleArn
      Handler: aws.lambda.handlers.kudoEntries.KudoEntriesUserProxyGET
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayRestApi
            Method: GET
            Path: /kudos/{proxy+}

  LambdaRouteProxyGET:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: rutastic-route-proxy-get
      Role: !Ref LambdaExecutionRoleArn
      Handler: aws.lambda.handlers.routes.RouteProxyGET
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayRestApi
            Method: GET
            Path: /rutas/{proxy+}
            Auth:
              Authorizer: NONE

  LambdaRouteFilterGET:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: rutastic-route-filter-get
      Role: !Ref LambdaExecutionRoleArn
      Handler: aws.lambda.handlers.routes.RouteFilterGET
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayRestApi
            Method: GET
            Path: /rutas/filtro
            Auth:
              Authorizer: NONE

  LambdaRouteStatisticsGET:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: rutastic-route-statistics-get
      Role: !Ref LambdaExecutionRoleArn
      Handler: aws.lambda.handlers.routes.RouteStatisticsGET
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayRestApi
            Method: GET
            Path: /rutas/estadisticas
            Auth:
              Authorizer: NONE

Outputs:
  CognitoUserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref CognitoUserPool
  CognitoUserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref CognitoUserPoolClient
  RutasticAPIEndpoint:
    Value: !Sub "https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${RutasticAPIStageName}"
